 this.main = this.main || {};
this.main.js = (function (exports) {
  'use strict';

  let canvas, gl, timeLoc;

  function initGL() {
    canvas = document.getElementById("MyCan");
    gl = canvas.getContext("webgl2");
    gl.clearColor(0.0, 0.0, 0.6, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT);

    let fs_txt = `#version 300 es
    precision highp float;
    out vec4 OutColor;
    in vec2 drawPos;
    
    uniform float Time;
  
    float Julian(vec2 Z)
    {
        float n = 0.0;
        vec2 Z0;
        vec2 C = vec2(0.35 + 0.08 * sin(Time + 3.0), 0.39 + 0.08 * cos(1.7 * Time));
        while ((Z.x * Z.x + Z.y * Z.y) < 4.0 && n++ < 255.0)
          Z0 = Z, Z = vec2(Z0.x * Z0.x - Z0.y * Z0.y + C.x, Z0.x * Z0.y + Z0.y * Z0.x + C.y);
        return n;
     }

    void main( void )
    {
       float n;
       vec2 Z;
          Z = drawPos;
          n = Julian(Z);
          OutColor = vec4(n / 255.0 * 0.3, n / 255.0 * 0.2, n / 255.0, 1.0);
    }
    `;

    let vs_txt = `#version 300 es
    precision highp float;
    in vec3 InPosition;
    out vec2 drawPos;
   
    void main( void )
    {
      gl_Position = vec4(InPosition, 1);
      drawPos = vec2(InPosition.x, InPosition.y);
    }
    `;

    let vs = loadShader(gl.VERTEX_SHADER, vs_txt),
        fs = loadShader(gl.FRAGMENT_SHADER, fs_txt),
        prg = gl.createProgram();
    gl.attachShader(prg, vs);
    gl.attachShader(prg, fs);
    gl.linkProgram(prg);
    if (!gl.getProgramParameter(prg, gl.LINK_STATUS)) {
      let buf = gl.getProgramInfoLog(prg);
      console.log("Program link fail: " + buf);
    }

    // Vertex buffer creation
    const size = 1;
    const vertexes = [
      -size,
      size,
      0,
      -size,
      -size,
      0,
      size,
      size,
      0,
      size,
      -size,
      0,
    ];

    const posLoc = gl.getAttribLocation(prg, "InPosition");
    let vertexArray = gl.createVertexArray();
    gl.bindVertexArray(vertexArray);
    let vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexes), gl.STATIC_DRAW);
    if (posLoc != -1) {
      gl.vertexAttribPointer(posLoc, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(posLoc);
    }

    timeLoc = gl.getUniformLocation(prg, "Time");
      gl.useProgram(prg);
  }

  function loadShader(shaderType, shaderSource) {
    const shader = gl.createShader(shaderType);
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      let buf = gl.getShaderInfoLog(shader);
      console.log("Shader compile fail: " + buf);
    }
    return shader;
  }

  function render() {
    gl.clear(gl.COLOR_BUFFER_BIT);

    if (timeLoc != -1) {
      const date = new Date();
      let t =
        date.getMinutes() * 60 +
        date.getSeconds() +
        date.getMilliseconds() / 1000;

      gl.uniform1f(timeLoc, t);
    }
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  }

  function main() {
    initGL();
    const draw = () => {
        render();
        window.requestAnimationFrame(draw);
    };
    draw();
  }

  window.addEventListener("load", () => {
    main();
  });

  exports.initGL = initGL;
  exports.main = main;
  exports.render = render;

  return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
